/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ImmutableStorageTest,
  ImmutableStorageTestInterface,
} from "../../../contracts/test/ImmutableStorageTest";

const _abi = [
  {
    inputs: [],
    name: "read",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "write",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806357de26a41461003b5780637ed0c3b214610059575b600080fd5b61004361006e565b6040516100509190610224565b60405180910390f35b61006c61006736600461026d565b61007d565b005b6060610078610089565b905090565b6100868161009b565b50565b6060610078610096610115565b610172565b60006100a6826101c8565b905060008151602083016000f090506100bd610115565b6001600160a01b0316816001600160a01b0316146101105760405162461bcd60e51b815260206004820152600c60248201526b15dc9a5d194819985a5b195960a21b604482015260640160405180910390fd5b505050565b604051606b60f91b6020820152602560fa1b60218201526bffffffffffffffffffffffff193060601b166022820152600160f81b60368201526000906037016040516020818303038152906040528051906020012060001c905090565b6060813b60018111610194575050604080516020810190915260008152919050565b8061019e81610334565b9150506040519150601f19601f602083010116820160405280825280600160208401853c50919050565b6060815160016101d8919061034b565b826040516020016101ea929190610364565b6040516020818303038152906040529050919050565b60005b8381101561021b578181015183820152602001610203565b50506000910152565b6020815260008251806020840152610243816040850160208701610200565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561027f57600080fd5b813567ffffffffffffffff8082111561029757600080fd5b818401915084601f8301126102ab57600080fd5b8135818111156102bd576102bd610257565b604051601f8201601f19908116603f011681019083821181831017156102e5576102e5610257565b816040528281528760208487010111156102fe57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000816103435761034361031e565b506000190190565b8082018082111561035e5761035e61031e565b92915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201526000600e820181905282516103ad81600f850160208701610200565b91909101600f01939250505056fea26469706673582212209964a3358e02e422b75a872b360fecd3278bffd0e4cdb5a1d5a320963dc5c1b364736f6c63430008110033";

type ImmutableStorageTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableStorageTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableStorageTest__factory extends ContractFactory {
  constructor(...args: ImmutableStorageTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ImmutableStorageTest> {
    return super.deploy(overrides || {}) as Promise<ImmutableStorageTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ImmutableStorageTest {
    return super.attach(address) as ImmutableStorageTest;
  }
  override connect(signer: Signer): ImmutableStorageTest__factory {
    return super.connect(signer) as ImmutableStorageTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableStorageTestInterface {
    return new utils.Interface(_abi) as ImmutableStorageTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImmutableStorageTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ImmutableStorageTest;
  }
}
